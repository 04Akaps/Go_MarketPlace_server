// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/listener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NewContractServiceClient is the client API for NewContractService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewContractServiceClient interface {
	CreateNewContract(ctx context.Context, in *CreateNewContractRequest, opts ...grpc.CallOption) (*CreateNewContractResponse, error)
}

type newContractServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNewContractServiceClient(cc grpc.ClientConnInterface) NewContractServiceClient {
	return &newContractServiceClient{cc}
}

func (c *newContractServiceClient) CreateNewContract(ctx context.Context, in *CreateNewContractRequest, opts ...grpc.CallOption) (*CreateNewContractResponse, error) {
	out := new(CreateNewContractResponse)
	err := c.cc.Invoke(ctx, "/NewContractService/CreateNewContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewContractServiceServer is the server API for NewContractService service.
// All implementations must embed UnimplementedNewContractServiceServer
// for forward compatibility
type NewContractServiceServer interface {
	CreateNewContract(context.Context, *CreateNewContractRequest) (*CreateNewContractResponse, error)
	mustEmbedUnimplementedNewContractServiceServer()
}

// UnimplementedNewContractServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNewContractServiceServer struct {
}

func (UnimplementedNewContractServiceServer) CreateNewContract(context.Context, *CreateNewContractRequest) (*CreateNewContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewContract not implemented")
}
func (UnimplementedNewContractServiceServer) mustEmbedUnimplementedNewContractServiceServer() {}

// UnsafeNewContractServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewContractServiceServer will
// result in compilation errors.
type UnsafeNewContractServiceServer interface {
	mustEmbedUnimplementedNewContractServiceServer()
}

func RegisterNewContractServiceServer(s grpc.ServiceRegistrar, srv NewContractServiceServer) {
	s.RegisterService(&NewContractService_ServiceDesc, srv)
}

func _NewContractService_CreateNewContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewContractServiceServer).CreateNewContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NewContractService/CreateNewContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewContractServiceServer).CreateNewContract(ctx, req.(*CreateNewContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NewContractService_ServiceDesc is the grpc.ServiceDesc for NewContractService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewContractService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NewContractService",
	HandlerType: (*NewContractServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewContract",
			Handler:    _NewContractService_CreateNewContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/listener.proto",
}
